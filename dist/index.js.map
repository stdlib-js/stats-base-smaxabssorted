{
  "version": 3,
  "sources": ["../lib/ndarray.js", "../lib/smaxabssorted.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnanf = require( '@stdlib/math-base-assert-is-nanf' );\nvar absf = require( '@stdlib/math-base-special-absf' );\n\n\n// MAIN //\n\n/**\n* Computes the maximum absolute value of a sorted single-precision floating-point strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - sorted input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} maximum absolute value\n*\n* @example\n* var Float32Array = require( '@stdlib/array-float32' );\n*\n* var x = new Float32Array( [ 2.0, -3.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = smaxabssorted( 4, x, 2, 1 );\n* // returns 4.0\n*/\nfunction smaxabssorted( N, x, strideX, offsetX ) {\n\tvar v1;\n\tvar v2;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || strideX === 0 ) {\n\t\treturn x[ 0 ];\n\t}\n\tv1 = x[ offsetX ];\n\tv2 = x[ offsetX + ((N-1)*strideX) ];\n\tif ( isnanf( v1 ) || isnanf( v2 ) ) {\n\t\treturn NaN;\n\t}\n\tv1 = absf( v1 );\n\tv2 = absf( v2 );\n\tif ( v1 > v2 ) {\n\t\treturn v1;\n\t}\n\treturn v2;\n}\n\n\n// EXPORTS //\n\nmodule.exports = smaxabssorted;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar stride2offset = require( '@stdlib/strided-base-stride2offset' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\n/**\n* Computes the maximum absolute value of a sorted single-precision floating-point strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - sorted input array\n* @param {integer} strideX - stride length\n* @returns {number} maximum absolute value\n*\n* @example\n* var Float32Array = require( '@stdlib/array-float32' );\n*\n* var x = new Float32Array( [ -1.0, -2.0, -3.0 ] );\n*\n* var v = smaxabssorted( x.length, x, 1 );\n* // returns 3.0\n*/\nfunction smaxabssorted( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = smaxabssorted;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar smaxabssorted = require( './smaxabssorted.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( smaxabssorted, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = smaxabssorted;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the maximum absolute value of a sorted single-precision floating-point strided array.\n*\n* @module @stdlib/stats-base-smaxabssorted\n*\n* @example\n* var Float32Array = require( '@stdlib/array-float32' );\n* var smaxabssorted = require( '@stdlib/stats-base-smaxabssorted' );\n*\n* var x = new Float32Array( [ -1.0, -2.0, -3.0 ] );\n*\n* var v = smaxabssorted( x.length, x, 1 );\n* // returns 3.0\n*\n* @example\n* var Float32Array = require( '@stdlib/array-float32' );\n* var smaxabssorted = require( '@stdlib/stats-base-smaxabssorted' );\n*\n* var x = new Float32Array( [ 2.0, -3.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = smaxabssorted.ndarray( 4, x, 2, 1 );\n* // returns 4.0\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAS,QAAS,kCAAmC,EACrDC,EAAO,QAAS,gCAAiC,EAsBrD,SAASC,EAAeC,EAAGC,EAAGC,EAASC,EAAU,CAChD,IAAIC,EACAC,EAEJ,OAAKL,GAAK,EACF,IAEHA,IAAM,GAAKE,IAAY,EACpBD,EAAG,CAAE,GAEbG,EAAKH,EAAGE,CAAQ,EAChBE,EAAKJ,EAAGE,GAAYH,EAAE,GAAGE,CAAS,EAC7BL,EAAQO,CAAG,GAAKP,EAAQQ,CAAG,EACxB,KAERD,EAAKN,EAAMM,CAAG,EACdC,EAAKP,EAAMO,CAAG,EACTD,EAAKC,EACFD,EAEDC,GACR,CAKAT,EAAO,QAAUG,ICvEjB,IAAAO,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAgB,QAAS,oCAAqC,EAC9DC,EAAU,IAqBd,SAASC,EAAeC,EAAGC,EAAGC,EAAU,CACvC,OAAOJ,EAASE,EAAGC,EAAGC,EAASL,EAAeG,EAAGE,CAAQ,CAAE,CAC5D,CAKAN,EAAO,QAAUG,ICnDjB,IAAAI,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAc,QAAS,uDAAwD,EAC/EC,EAAgB,IAChBC,EAAU,IAKdF,EAAaC,EAAe,UAAWC,CAAQ,EAK/CH,EAAO,QAAUE,ICYjB,IAAIE,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_ndarray", "__commonJSMin", "exports", "module", "isnanf", "absf", "smaxabssorted", "N", "x", "strideX", "offsetX", "v1", "v2", "require_smaxabssorted", "__commonJSMin", "exports", "module", "stride2offset", "ndarray", "smaxabssorted", "N", "x", "strideX", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "smaxabssorted", "ndarray", "main"]
}
